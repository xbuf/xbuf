plugins {
	id "com.google.protobuf" version "0.7.7"
	id "java"
	id "maven-publish"
	id "com.jfrog.bintray" version "1.6"
}

group = "org.xbuf"
def description = "a game exchange format for 3d data"
project.version = "git describe --always --dirty".execute().text.trim()
println("version : '${project.version}'")

repositories {
	jcenter()
}

dependencies {
	compile 'com.google.protobuf:protobuf-java:3.0.0'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// see https://github.com/google/protobuf-gradle-plugin
protobuf {
	protoc {
		// Download from repositories
		artifact = 'com.google.protobuf:protoc:3.0.0'
	}
	generateProtoTasks {
		all().each { task ->
			task.builtins {
				java { }
				python { }
				cpp { }
			}
		}
	}
}
if ((System.getProperty('os.name')+'_'+System.getProperty('os.arch')) == "Linux_x86_64") {
	protobuf {
		plugins {
			rust {
				path = 'tools/linux_x64/protoc-gen-rust'
			}
			doc {
				path = 'tools/linux_x64/protoc-gen-doc'
			}
		}
		generateProtoTasks {
			all().each { task ->
				task.plugins {
					rust { }
					doc {
						option 'markdown,api.md'
					}
				}
			}
		}
	}
}

task compilePython(type: Copy) {
	from "src/main/python"
	into "build/generated/source/proto/main/python"
}
classes.dependsOn(compilePython)

task sourcesProto(type: Jar) {
	from 'src/main/proto'
	classifier = 'proto'
}

task sourcesJava(type: Jar) {
	from "build/generated/source/proto/main/java"
	//from sourceSets.main.allSource
	classifier = 'sources'
}

task sourcesCpp(type: Zip) {
	from "build/generated/source/proto/main/cpp"
	classifier = 'cpp'
}

task sourcesPython(type: Zip) {
	from "build/generated/source/proto/main/python"
	classifier = 'python'
}

def pomConfig = {
	licenses {
		license {
			name "Public domain (CC0-1.0)"
			url "http://creativecommons.org/publicdomain/zero/1.0/"
			distribution "repo"
		}
	}
	developers {
		developer {
			id "davidB"
			name "David Bernard"
		}
		developer {
			id "riccardobl"
			name "Riccardo Balbo"
		}
	}
}

publishing {
	publications {
		mavenStuff(MavenPublication) {
			from components.java
			artifact sourcesProto
			artifact sourcesJava
			artifact sourcesCpp
			artifact sourcesPython
			pom.withXml {
				def root = asNode()
				root.appendNode('description', description)
				root.children().last() + pomConfig
			}
		}
	}
}

bintray {
	user = bintray_user
	key = bintray_api_key

	publications = ['mavenStuff'] //When uploading Maven-based publication files
	//dryRun = false //Whether to run this as dry-run, without deploying
	publish = true //If version should be auto published after an upload
	pkg {
		repo = 'maven'
		name = project.name
		desc = description
		websiteUrl = "https://github.com/xbuf/${project.name}"
		issueTrackerUrl = "https://github.com/xbuf/${project.name}/issues"
		vcsUrl = "https://github.com/xbuf/${project.name}.git"
		licenses = ['CC0-1.0']
		//labels = ['']
		publicDownloadNumbers = true
		version {
			name = project.version
			vcsTag = project.version
			//attributes = [] //Optional version-level attributes
			//gpg {
			//	sign = true //Determines whether to GPG sign the files. The default is false
			//	passphrase = 'optional, the passphrase for GPG signing'
			//}
		}
	}
}

bintrayUpload.onlyIf {
		(bintray_api_key.length() > 0) &&
		(version ==~ /(d+)\.(d+)\.(d+)/)
}
