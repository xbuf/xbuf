syntax = "proto3";

package xbuf;

import public "xbuf/primitives.proto";

/// the direction of the light need by directional and spot is Z (forward like regular Node).
/// To use an other direction add relation to a Node and change the rotation of the Node (idem for translation).
message Light {
  enum Kind {
    undef = 0;
    ambient = 1;
    directional = 2;
    point = 3;
    spot = 4;
  }
  ///@check identifier (id) should be unique and invariant over a set of datas (eg: use uuid) and over time.
  string id = 1;
  Kind kind = 2; //[default = directional];
  Color color = 3;
  float intensity = 4; //[default = 1.0];
  bool cast_shadow = 5; //[default = false];
  /// attenuation from the radial distance of light source (for spot and point)
  Attenuation radial_distance = 6;
  /// attenuation of the angle forme between the forward axis (z) and the direction of the point.
  /// eg: for a linear attenuation linear.begin is the end of inner cone, linear.end is the end of outer cone : linear define the penumbra
  Attenuation spot_angle = 7;
  /// display name
  string name = 8;
}

message Attenuation {
  ///  for a distance max is in meter, for an angle attenuation max is in radian.
  float max = 1;
  oneof curve {
    AttenuationLinear linear = 4;
    AttenuationSmooth smooth = 5;
    AttenuationInverse inverse = 6;
    AttenuationInverseSquare inverse_square = 7;
  }
}
message AttenuationLinear {
  float begin = 4; //[default = 0.0];
  float end = 5; //[default = 1.0];
}
message AttenuationSmooth {
  float begin = 4; //[default = 0.0];
  float end = 5; //[default = 1.0];
}
message AttenuationInverse {
  float scale = 2; //[default = 1.0];
  float offset = 3; //[default = 0.0];
  float constant = 4; //[default = 0.0];
  float linear = 5; //[default = 1.0];
}
message AttenuationInverseSquare {
  float scale = 2; //[default = 1.0];
  float offset = 3; //[default = 0.0];
  float constant = 4; //[default = 0.0];
  float linear = 5; //[default = 0.0];
  float quadratic = 6; //[default = 1.0];
}
