syntax = "proto3";

package xbuf;

// deprecated
// message Geometry {
//   ///@check identifier (id) should be unique and invariant over a set of datas (eg: use uuid) and over time.
//   string id = 1;
//   repeated Mesh meshes = 2;
//   /// display name
//   string name = 3;
//   //repeated Morph morphs = 3 [packed=true];
//   //visible bool true Whether the geometry is visible.
//   //If the visible property is false, then the geometry should not be rendered but should still
//   //shadow bool true Whether the geometry casts shadows.
//   //motion_blur bool true Whether the geometry is rendered with motion blur.
// }

message Mesh {
  enum Primitive {
    undef = 0;
    /// "points" The mesh is composed of a set of independent points. The number of points is n, and point i is given by vertex i.
    points = 1;
    /// "lines" The mesh is composed of a set of independent lines. The number of lines is n / 2 , and line i is composed of vertices 2i and 2i+1 .
    lines = 2;
    /// "line_strip" The mesh is composed of one or more line strips. The number of lines is  n - 1 , and line i is composed of vertices i and i + 1 .
    line_strip = 3;
    /// "triangles" The mesh is composed of a set of independent triangles. The number of triangles is n/3 , and triangle i is composed of vertices 3i , 3i + 1 , and 3i + 2.
    triangles = 4;
    /// "triangle_strip" The mesh is composed of one or more triangle strips. The number of triangles is n - 2 , and triangle i is composed of vertices i, i + 1 , and i + 2 when i is even or vertices i, i + 2 , and i + 1 when i is odd, in the orders listed.
    triangle_strip = 5;
  }
  ///@check identifier (id) should be unique and invariant over a set of datas (eg: use uuid) and over time.
  string id = 1;
  Primitive primitive = 2;
  uint32 lod = 3; //[default = 0];
  ///@check every vertexArray should have the same number of elements (size / step)
  repeated VertexArray vertexArrays = 4;
  ///@check max value of every indexArray should be < number of elements of vertexArrays
  repeated IndexArray indexArrays = 5;
  /// display name
  string name = 6;
  Skin skin = 7;
}

message VertexArray {
  enum Attrib {
    undef = 0;
    position = 1;
    normal = 2;
    tangent = 3;
    bitangent = 4;
    color = 5;
    texcoord = 6;
    texcoord2 = 7;
    texcoord3 = 8;
    texcoord4 = 9;
    texcoord5 = 10;
    texcoord6 = 11;
    texcoord7 = 12;
    texcoord8 = 13;
    texcoord9 = 14;
  }
  Attrib attrib = 1;
  uint32 morph = 2; //[default = 0];
  oneof buffer {
    FloatBuffer floats = 3;
    //DoubleBuffer doubles = 4;
  }
}

message IndexArray {
  oneof buffer {
    UintBuffer ints = 1;
  }
}

message FloatBuffer {
  repeated float values = 1 [packed = true];
  /// number of float per group/entry (eg 3 for vec3, 2 for texcoord,...). the length of values should be a multiple of step
  uint32 step = 2; //[default = 1];
}
// message DoubleBuffer {
//   repeated double values = 1 [packed = true];
//   /// number of float per group/entry (eg 3 for vec3, 2 for texcoord,...). the length of values should be a multiple of step
//   uint32 step = 2; //[default = 1];
// }
message UintBuffer {
  repeated uint32 values = 1 [packed = true];
  /// number of float per group/entry (eg 3 for vec3, 2 for texcoord,...). the length of values should be a multiple of step
  uint32 step = 2; //[default = 1];
}

/// Create the link between a Skeleton and a Mesh
/// boneCount[n] : number of bone that influence vertex[n]
/// boneIndex[sum( 0 -> n-1, boneCount)] : index of the first bone that influence vertex[n]
/// boneIndex[sum( 0 -> n-1, boneCount) + 1] : index of the second bone that influence vertex[n] if boneCount[n] > 1
/// boneWeight[sum( 0 -> n-1, boneCount)] : influence's weight of the first bone that influence vertex[n]
message Skin {
  ///number of bone that influence the vertex
  ///same vertices order than in the attached mesh
  ///@check length == number of element (Mesh.vertexArrays)
  repeated int32 boneCount = 2 [packed=true];
  ///@check length == sum(boneCount)
  ///index of the bone in the skeleton
  repeated int32 boneIndex = 3 [packed=true];
  ///@check length == length(boneIndex)
  ///weight are defined in [0, 1] and sum should be ~ 1. It's highly suggested to normalized weight of importer side (eg: weight/ totalWeight)
  repeated float boneWeight = 4 [packed=true];
  repeated string boneNames = 5;
}
